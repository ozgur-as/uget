name: ci
on:
  push:
    branches: [ main, master ]
    tags: [ "v*" ]
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04, windows-latest ]
        config: [ Debug, RelWithDebInfo ]
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_DOWNLOADS_DIR: ${{ github.workspace }}\.vcpkg_downloads
      VCPKG_DOWNLOADS: ${{ github.workspace }}\.vcpkg_downloads
      VCPKG_FTPMIRROR_URL: https://ftpmirror.gnu.org/gnu/{path}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # ---------- Linux deps ----------
      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ninja-build pkg-config xvfb \
            libgtk-3-dev libglib2.0-dev \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libcurl4-openssl-dev libayatana-appindicator3-dev \
            libgcrypt20-dev

      # ---------- Windows build tooling ----------
      - name: Setup Ninja (Windows)
        if: runner.os == 'Windows'
        uses: seanmiddleditch/gha-setup-ninja@v4

      - name: Restore vcpkg downloads cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_DOWNLOADS_DIR }}
          key: windows-vcpkg-downloads-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            windows-vcpkg-downloads-

      - name: Pre-fetch GNU sources (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $downloads = (Resolve-Path -LiteralPath $env:VCPKG_DOWNLOADS_DIR -ErrorAction SilentlyContinue)
          if (-not $downloads) {
            $downloads = $env:VCPKG_DOWNLOADS_DIR
          } else {
            $downloads = $downloads.ProviderPath
          }
          if (-not (Test-Path $downloads)) {
            New-Item -ItemType Directory -Path $downloads | Out-Null
          }

          $archives = @(
            @{ Name = "gettext-0.22.5.tar.gz"; Url = "https://ftpmirror.gnu.org/gnu/gettext/gettext-0.22.5.tar.gz" },
            @{ Name = "gettext-0.22.4.tar.gz"; Url = "https://ftpmirror.gnu.org/gnu/gettext/gettext-0.22.4.tar.gz" },
            @{ Name = "libiconv-1.17.tar.gz"; Url = "https://ftpmirror.gnu.org/gnu/libiconv/libiconv-1.17.tar.gz" }
          )

          foreach ($archive in $archives) {
            $target = Join-Path $downloads $archive.Name
            if (Test-Path $target) {
              Write-Host "Archive $($archive.Name) already cached."
              continue
            }

            try {
              Write-Host "Downloading $($archive.Url) ..."
              Invoke-WebRequest -Uri $archive.Url -OutFile $target -UseBasicParsing
            } catch {
              Write-Warning "Could not download $($archive.Url): $($_.Exception.Message)"
              if (Test-Path $target) {
                Remove-Item $target -ErrorAction SilentlyContinue
              }
            }
          }

          "VCPKG_DOWNLOADS=$downloads" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $assetPath = $downloads -replace "\\", "/"
          $assetSources = "clear;local,$assetPath;x-remote,$env:VCPKG_FTPMIRROR_URL;x-block-origin"
          "VCPKG_ASSET_SOURCES=$assetSources" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # ---------- Resolve vcpkg commit ----------
      - name: Resolve vcpkg commit (Windows)
        if: runner.os == 'Windows'
        id: vcpkgsha
        shell: bash
        run: |
          set -e
          # Fetch latest commit on vcpkg's master (main) branch
          SHA=$(git ls-remote https://github.com/microsoft/vcpkg refs/heads/master | cut -f1)
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"
          echo "Using vcpkg commit: $SHA"

      # ---------- Windows deps via vcpkg ----------
      - name: Checkout vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkgDir = Join-Path $Env:GITHUB_WORKSPACE "vcpkg"
          if (Test-Path $vcpkgDir) {
            Remove-Item $vcpkgDir -Recurse -Force
          }
          git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
          git -C $vcpkgDir checkout ${{ steps.vcpkgsha.outputs.sha }}
          "VCPKG_ROOT=$vcpkgDir" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure vcpkg environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $installed = Join-Path $Env:GITHUB_WORKSPACE "build\vcpkg-installed"
          if (-not (Test-Path $installed)) {
            New-Item -ItemType Directory -Path $installed | Out-Null
          }
          "VCPKG_DEFAULT_TRIPLET=x64-windows" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          "VCPKG_INSTALLED_DIR=$installed" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup MSVC dev environment (x64)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          & "$Env:GITHUB_WORKSPACE\vcpkg\bootstrap-vcpkg.bat" -disableMetrics

      - name: Install dependencies via vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          $vcpkgExe = Join-Path $Env:GITHUB_WORKSPACE "vcpkg\vcpkg.exe"
          if (-not (Test-Path $vcpkgExe)) {
            throw "vcpkg.exe not found at $vcpkgExe"
          }

          $manifestRoot = $Env:GITHUB_WORKSPACE
          $downloads = $Env:VCPKG_DOWNLOADS_DIR
          $installRoot = $Env:VCPKG_INSTALLED_DIR
          $triplet = $Env:VCPKG_DEFAULT_TRIPLET

          $args = @(
            "install",
            "--triplet", $triplet,
            "--recurse",
            "--clean-after-build",
            "--x-manifest-root", $manifestRoot,
            "--downloads-root", $downloads,
            "--x-install-root", $installRoot
          )

          & $vcpkgExe @args

      # ---------- Configure ----------
      - name: Configure (Linux Debug)
        if: runner.os == 'Linux' && matrix.config == 'Debug'
        run: cmake --preset dev -DENABLE_MEGA=OFF
      - name: Configure (Linux RelWithDebInfo)
        if: runner.os == 'Linux' && matrix.config == 'RelWithDebInfo'
        run: cmake --preset rel -DENABLE_MEGA=OFF
      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: cmake --preset msvc-vcpkg -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DWITH_GUI=OFF -DWITH_TRAY=OFF -DENABLE_MEGA=OFF

      # ---------- Build ----------
      - name: Build (Linux Debug)
        if: runner.os == 'Linux' && matrix.config == 'Debug'
        run: cmake --build build/dev -- -v
      - name: Build (Linux RelWithDebInfo)
        if: runner.os == 'Linux' && matrix.config == 'RelWithDebInfo'
        run: cmake --build build/rel -- -v
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build --preset msvc-vcpkg --config ${{ matrix.config }} -- -v

      # ---------- Test ----------
      - name: Test (Linux)
        if: runner.os == 'Linux'
        run: |
          if command -v xvfb-run >/dev/null 2>&1; then
            xvfb-run -a ctest --test-dir ${{ matrix.config == 'Debug' && 'build/dev' || 'build/rel' }} --output-on-failure -LE net
          else
            ctest --test-dir ${{ matrix.config == 'Debug' && 'build/dev' || 'build/rel' }} --output-on-failure -LE net
          fi
      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: ctest --test-dir build/msvc -C ${{ matrix.config }} --output-on-failure -LE net

      # ---------- Artifacts ----------
      - name: Upload build dir
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.config }}
          path: build/**
          if-no-files-found: warn
